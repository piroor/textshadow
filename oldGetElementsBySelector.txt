	getElementsBySelectorOld : function(aSelector, aTargetDocument) 
	{
var startTime = (new Date()).getTime();
		var self = this;

		var tokens = aSelector
					.replace(/(^|\b)\w+\||\*\|/g, '')
					.replace(/\s+/g, ' ')
					.replace(/\s*([>+])\s*/g, '$1');
//dump(tokens+'\n');

		tokens = tokens.split('');
		var foundElements = [aTargetDocument];

		var buf = {
			'element'     : '',
			'attributes'  : [],
			'attribute'   : '',
			'id'          : '',
			'class'       : '',
			'pseud'       : '',
			'combinators' : ' ',
			'clear'       : function () {
				this.element     = '';
				this.attributes  = [];
				this.attribute   = '';
				this.id          = '';
				this.class       = '';
				this.pseud       = '';
				this.combinators = '';
			}
		};

		var mode = 'element';

		var getTargetElements = function (tagName, targetElements) {
			var elements = [];
			var elmCount = 0;
			for ( var i = 0, len = targetElements.length; i < len; i++ ) {
				var target = targetElements[i];
				switch ( buf.combinators ) {
					case ' ':
						var found = target.getElementsByTagName(tagName);
						for ( var j = 0, found_len = found.length; j < found_len; j++ ) {
							elements[elmCount++] = found[j];
						}
						break;
					case '>':
						var childNodes = target.childNodes;
						for ( var j = 0, node_len = childNodes.length; j < node_len; j++ ) {
							var childNode = childNodes[j];
							var nodeType = childNode.nodeType;
							if ( nodeType == 1 ) {
								if ( tagName != '*'
								  && childNode.tagName.toLowerCase() != tagName.toLowerCase() ) {
									continue;
								}
								elements[elmCount++] = childNode;
							}
						}
						break;
					case '+':
						var nextNode = target.nextSibling;
						while ( 1 ) {
							if ( nextNode != null ) {
								if ( nextNode.nodeType == 1 ) {
									if ( tagName != '*'
									  && tagName.toLowerCase() != nextNode.tagName.toLowerCase() ) {
										break;
									}
									elements[elmCount++] = nextNode;
									break;
								}
								else {
									nextNode = nextNode.nextSibling;
									continue;
								}
							}
							else {
								break;
							}
						}
						break;
				}
			}
		return elements;
		};

		var search = function () {
			var found = [];
			var tagName = buf.element.toLowerCase();
			if ( tagName.length == 0 ) {
				tagName = '*';
			}
			// Element
			found = getTargetElements( tagName, foundElements );
			// ID
			if ( buf.id.length != 0 ) {
				var targets = found;
				var id = buf.id;

				for ( var i = 0, len = targets.length; i < len; i++ ) {
					var target = targets[i];
					var targetId = target.getAttribute('id');
					if ( targetId && targetId == id ) {
						found = [target];
						break;
					}
				}
			}
			// Class
			if ( buf.class.length != 0 ) {
				var classes = buf.class.split('.');
				var targets = found;

				var getElementsByClassName = function ( classRegex, targetElements ) {
					var elements = [];
					var elmCount = 0
					for ( var i = 0, len = targetElements.length; i < len; i ++ ) {
						var element = targetElements[i];
						var className = element.className;
						if ( className && className.match( classRegex ) ) {
							elements[elmCount++] = element;
						}
					}
					return elements;
				}

				for ( var i = 0, class_len = classes.length; i < class_len; i++ ) {
					var classRegex = new RegExp('(^|\\s)' + classes[i] + '(\\s|$)');
					if ( i == 0 ) {
						found = getElementsByClassName( classRegex, targets );
					}
					else {
						found = getElementsByClassName( classRegex, found );
					}
				}
			}

			var getElementsByCondition = function ( callback, targetElements ) {
				var elements = [];
				var elmCount = 0;
				for ( var i = 0, len = targetElements.length; i < len; i++ ) {
					var element = targetElements[i];
					if ( callback(element) > 0 ) {
						elements[elmCount++] = element;
					}
				}
				return elements;
			}

			// Attribute
			if ( buf.attributes.length != 0 ) {
				var attributes = buf.attributes;
				var targets = found;

				for ( var i = 0, attr_len = attributes.length; i < attr_len; i++ ) {
					var attribute = attributes[i];

					attribute.match(/^(\w+)(?:([~|]?=)["](.+?)["])?$/);
					var attrName  = RegExp.$1;
					var operator  = RegExp.$2;
					var attrValue = RegExp.$3;

					var checkFunc;
					switch ( operator ) {
						case  '=': // E[attr="foo"]
							checkFunc = function (e) { return ( e.getAttribute(attrName) && e.getAttribute(attrName) == attrValue ) ? 1 : -1 };
							break;
						case '~=': // E[attr~="foo"]
							checkFunc = function (e) { return ( e.getAttribute(attrName) && e.getAttribute(attrName).match( new RegExp('\\b' + attrValue + '\\b') ) ) ? 1 : -1 };
							break;
						case '|=': // E[lang|="en"]
							checkFunc = function (e) { return ( e.getAttribute(attrName) && e.getAttribute(attrName).match( new RegExp('^' + attrValue + '-?') ) ) ? 1 : -1 };
							break;
						default  : // E[attr]
							checkFunc = function (e) { return ( e.getAttribute(attrName) ) ? 1 : -1 };
							break;
					}

					if ( i == 0 ) {
						found = getElementsByCondition( checkFunc, targets );
					}
					else {
						found = getElementsByCondition( checkFunc, found );
					}
				}

			}
			// Pseud-class
			if ( buf.pseud.length != 0 ) {
				var getFirstLetters = function(targetElements) {
					var elements = [];
					var first = aTargetDocument.createElement('_moz-first-letter');
					for (var i = 0, len = targetElements.length; i < len; i++)
					{
						var firsts = self.getNodesByXPath('descendant::*[local-name() = "_moz-first-letter" or local-name() = "_MOZ-FIRST-LETTER"]', targetElements[i]);
						if (firsts.snapshotLength) {
							elements.push(firsts.snapshotItem(0));
						}
						else {
							var text = self.getNodesByXPath('descendant::text()', targetElements[i]);
							var node = text.snapshotItem(0);
							node.nodeValue = node.nodeValue.replace(/^(\s*[\"\'\`\<\>\{\}\[\]\(\)\u300c\u300d\uff62\uff63\u300e\u300f\u3010\u3011\u2018\u2019\u201c\u201d\uff3b\uff3d\uff5b\uff5d\u3008\u3009\u300a\u300b\uff08\uff09\u3014\u3015]*.)/, '');
							var newFirst = first.cloneNode(true)
							node.parentNode.insertBefore(newFirst, node)
								.appendChild(aTargetDocument.createTextNode(RegExp.$1));
							elements.push(newFirst);
						}
					}
					return elements;
				}

				var getFirstLines = function(targetElements) {
					var elements = [];
					var d = aTargetDocument;
					var first = d.createElement('_moz-first-line');
					var dummy = d.createElement('_moz-dummy-box');
					var dummy1 = dummy.cloneNode(true);
					var dummy2 = dummy.cloneNode(true);
					var range = d.createRange();
					for (var i = 0, len = targetElements.length; i < len; i++)
					{
						var firsts = self.getNodesByXPath('descendant::*[local-name() = "_moz-first-line" or local-name() = "_MOZ-FIRST-LINE"]', targetElements[i]);
						if (firsts.snapshotLength) {
							elements.push(firsts.snapshotItem(0));
						}
						else {
							var text = self.getNodesByXPath('descendant::text()', targetElements[i]);
							var lineEnd = false;
							for (var j = 0, maxj = text.snapshotLength; j < maxj; j++)
							{
								var node = text.snapshotItem(j);
								var parent = node.parentNode;
								var firstPart = first.cloneNode(true);
								firstPart.appendChild(d.createTextNode(''));
								parent.insertBefore(dummy1, node);
								var y = d.getBoxObjectFor(dummy1).screenY;
								for (var k = 0, maxk = node.nodeValue.length; k < maxk; k++)
								{
									range.selectNodeContents(parent);
									range.setStart(dummy1.nextSibling, k);
									range.collapse(true);
									range.insertNode(dummy2);
									range.setStartBefore(parent.firstChild);
									if (d.getBoxObjectFor(dummy2).screenY != y) {
										firstPart.firstChild.nodeValue = firstPart.firstChild.nodeValue.substring(0, firstPart.firstChild.nodeValue.length-1);
										parent.removeChild(dummy2);
										parent.normalize();
										lineEnd = true;
										break;
									}
									firstPart.firstChild.nodeValue += parent.textContent.charAt(k);
									parent.removeChild(dummy2);
									parent.normalize();
								}
								parent.removeChild(dummy1);
								if (firstPart.firstChild.nodeValue.length &&
									!/^\s*$/.test(firstPart.firstChild.nodeValue)) {
									range.selectNodeContents(parent);
									range.insertNode(firstPart);
									range.selectNodeContents(parent);
									range.setStartAfter(firstPart);
									range.setEnd(firstPart.nextSibling, firstPart.firstChild.nodeValue.length);
									range.deleteContents();
									elements.push(firstPart);
								}
								if (lineEnd) break;
							}
						}
					}
					range.detach();
					return elements;
				}

				switch (buf.pseud)
				{
					case 'first-letter':
						found = getFirstLetters(found);
						break;

					case 'first-line':
						found = getFirstLines(found);
						break;

					case 'first-child':
						found = getElementsByCondition(function(aElement) {
							return self.getNodesByXPath('preceding-sibling::*', aElement).snapshotLength ? -1 : 1 ;
						}, found);
						break;

					case 'last-child':
						found = getElementsByCondition(function(aElement) {
							return self.getNodesByXPath('following-sibling::*', aElement).snapshotLength ? -1 : 1 ;
						}, found);
						break;

					case 'first-of-type':
						found = getElementsByCondition(function(aElement) {
							return self.getNodesByXPath('preceding-sibling::*[local-name() = "' + aElement.localName + '" or local-name() = "' + aElement.localName.toUpperCase() + '"]', aElement).snapshotLength ? -1 : 1 ;
						}, found);
						break;

					case 'last-of-type':
						found = getElementsByCondition(function(aElement) {
							return self.getNodesByXPath('following-sibling::*[local-name() = "' + aElement.localName + '" or local-name() = "' + aElement.localName.toUpperCase() + '"]', aElement).snapshotLength ? -1 : 1 ;
						}, found);
						break;

					case 'only-child':
						found = getElementsByCondition(function(aElement) {
							return (
								self.getNodesByXPath('preceding-sibling::*', aElement).snapshotLength ||
								self.getNodesByXPath('following-sibling::*', aElement).snapshotLength
							) ? -1 : 1 ;
						}, found);
						break;

					case 'only-of-type':
						found = getElementsByCondition(function(aElement) {
							return (
								self.getNodesByXPath('preceding-sibling::*[local-name() = "' + aElement.localName + '" or local-name() = "' + aElement.localName.toUpperCase() + '"]', aElement).snapshotLength ||
								self.getNodesByXPath('following-sibling::*[local-name() = "' + aElement.localName + '" or local-name() = "' + aElement.localName.toUpperCase() + '"]', aElement).snapshotLength
							) ? -1 : 1 ;
						}, found);
						break;

					case 'empty':
						found = getElementsByCondition(function(aElement) {
							return aElement.hasChildNodes() ? -1 : 1 ;
						}, found);
						break;

					case 'link':
						found = getElementsByCondition(function(aElement) {
							return (/^(link|a|area)$/i.test(aElement.localName) && (aElement.href || aElement.getAttribute('href'))) ? 1 : -1 ;
						}, found);
						break;

					case 'visited':
						var history = Components.classes['@mozilla.org/browser/global-history;2'].getService(Components.interfaces.nsIGlobalHistory2);
						found = getElementsByCondition(function(aElement) {
							var uri = aElement.href || aElement.getAttribute('href');
							var isLink = /^(link|a|area)$/i.test(aElement.localName) && uri;
							var isVisited = false;
							if (isLink) {
								try {
									isVisited = history.isVisited(self.makeURIFromSpec(uri));
								}
								catch(e) {
									dump(uri+' / '+self.makeURIFromSpec(uri));
									dump(e+'\n');
								}
							}
							return isLink && isVisited ? 1 : -1 ;
						}, found);
						break;

					case 'target':
						found = getElementsByCondition(function(aElement) {
							(/#(.+)$/).test(aTargetDocument.defaultView.location.href);
							return (RegExp.$1 && aElement.getAttribute('id') == decodeURIComponent(RegExp.$1)) ? 1 : -1 ;
						}, found);
						break;

					case 'enabled':
						found = getElementsByCondition(function(aElement) {
							var enabled = (aElement.getAttribute('enabled') || '').toLowerCase();
							var disabled = (aElement.getAttribute('disabled') || '').toLowerCase();
							return (
								(enabled && (enabled == 'true' || enabled == 'enabled')) ||
								(disabled && (disabled == 'false' || (disabled != 'true' && disabled != 'disabled')))
								) ? 1 : -1 ;
						}, found);
						break;

					case 'disabled':
						found = getElementsByCondition(function(aElement) {
							var enabled = (aElement.getAttribute('enabled') || '').toLowerCase();
							var disabled = (aElement.getAttribute('disabled') || '').toLowerCase();
							return (
								(!enabled || (enabled != 'true' && enabled != 'enabled')) ||
								(disabled && (disabled == 'true' || disabled == 'disabled'))
								) ? 1 : -1 ;
						}, found);
						break;

					case 'checked':
						found = getElementsByCondition(function(aElement) {
							var checked = (aElement.getAttribute('checked') || '').toLowerCase();
							var selected = (aElement.getAttribute('selected') || '').toLowerCase();
							return (
								(checked && (checked == 'true' || checked == 'checked')) ||
								(selected && (selected == 'true' || selected == 'selected'))
								) ? 1 : -1 ;
						}, found);
						break;

					case 'indeterminate':
						found = getElementsByCondition(function(aElement) {
							var checked = (aElement.getAttribute('checked') || '').toLowerCase();
							var selected = (aElement.getAttribute('selected') || '').toLowerCase();
							return (
								(!checked || (checked != 'true' && checked != 'checked')) ||
								(!selected || (selected != 'true' && selected != 'checked'))
								) ? 1 : -1 ;
						}, found);
						break;

					case 'root':
						found = getElementsByCondition(function(aElement) {
							return aElement == aTargetDocument.documentElement ? 1 : -1 ;
						}, found);
						break;

					default:
						found = [];
						break;
				}
			}
			// Pseud-elements
			foundElements = found;
			buf.clear();
		};


		var escaped = false;
		for ( var i = 0, len = tokens.length; i < len; i++  ) {
			var token = tokens[i];
			if (escaped) {
				buf[mode] += token;
				escaped = false;
				continue;
			}
			switch ( token ) {
				case '\\':
					escaped = true;
					break;

				// selector
				case '[':
					mode = 'attribute';
					break;
				case ']':
					buf.attributes.push( buf.attribute );
					buf.attribute = '';
					mode = 'element';
					break;
				case '.':
					if ( mode == 'class' ) {
						buf[mode] += token;
					}
					mode = 'class';
					break;
				case '#':
					mode = 'id';
					break;
				case ':':
					mode = 'pseud';
					break;
				// combinators
				case ' ':
					search();
					buf.combinators = ' ';
					mode = 'element';
					break;
				case '>':
					search();
					buf.combinators = '>';
					mode = 'element';
					break;
				case '+':
					search();
					buf.combinators = '+';
					mode = 'element';
					break;
				// elements
				case '*':
					buf.element = '*';
					break;
				// default
				default :
					buf[mode] += token;
					break;

			}
			if ( foundElements.length == 0 ) {
var endTime = (new Date()).getTime();
dump('getElementsBySelector '+(endTime-startTime)+'\n');
				return foundElements;
			}
		}
		search();

//dump(foundElements+'\n');
var endTime = (new Date()).getTime();
dump('getElementsBySelector '+(endTime-startTime)+'\n');
		return foundElements;
	},
 
