/* 
対応表

!        ... サポートできないかもしれない
?        ... サポートできそうでやってない
それ以外 ... サポート済み

CSS2:
    *
    E
    E F
    E > F
    E + F
    E[foo]
    E[foo="warning"]
    E[foo~="warning"]
    E[lang|="en"]
    E.myClass
    E#myID
    E:first-child
    ?E:lang(c)
    E:first-line
    E:first-letter
    !E:before
    !E:after
    E:link
    ?E:visited
    !E:active
    !E:hover
    !E:focus
CSS3:
    E[foo^="bar"]
    E[foo$="bar"]
    E[foo*="bar"]
    E:root
    E:nth-child(n)
    E:nth-last-child(n)
    E:nth-of-type(n)
    E:nth-last-of-type(n)
    E:last-child
    E:first-of-type
    E:last-of-type
    E:only-child
    E:only-of-type
    E:empty
    E:target
    E:enabled
    E:disabled
    E:contains("foo")
    E::first-line
    E::first-letter
    ?E::selection
    !E::before
    !E::after
    E:not(s)
    E ~ F
*/

/*
NAME: selector.js - Get elements by CSS selector
Author :  |
    SHIMODA "Piro" Hiroshi, <piro@p.club.ne.jp>
    http://piro.sakura.ne.jp/
Original Auther:  |
    Nyarla, <thotep@nyarla.net>
    http://nyarla.net/blog/
License: |
    This libary Copyright (c) 2006, Nyarla, (c) 2007, SHIMODA "Piro" Hiroshi,

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
*/

document.getElementsBySelector = function(aSelector) {
	var nodes = [];
	var count = 0;

	if (!aSelector) return nodes;

	var expression = this.convertSelectorToXPath(aSelector);
	if (!expression) return nodes;

	result = this.getNodesByXPath(expression);
	for (var i = 0, maxi = result.snapshotLength; i < maxi; i++)
	{
		nodes[count++] = result.snapshotItem(i);
	}
	return nodes;
};

document.convertSelectorToXPath = function(aSelector, aInNotPseudClass) {

	// 元のドキュメントをいじりたくない場合は、falseにすること。
	// If you don't want to modify original document, set this to false.
	var silhouettePseudElementsAndClasses = true;

//------------------------------------------------------------------------

	var self = this;
	var foundElements = [this];

	var tokens = aSelector
				.replace(/\s+/g, ' ')
				.replace(/\s*([>+])\s*/g, '$1');
//dump(tokens+'\n');

	tokens = tokens.split('');

	var buf = {
		'element'     : '',
		'attributes'  : [],
		'attribute'   : '',
		'id'          : '',
		'class'       : '',
		'pseud'       : '',
		'combinators' : ' ',
		'clear'       : function () {
			this.element     = '';
			this.attributes  = [];
			this.attribute   = '';
			this.id          = '';
			this.class       = '';
			this.pseud       = '';
			this.combinators = '';
		}
	};

	var mode = 'element';

	var steps = [];
	var stepsCount = 0;

	function evaluate(aExpression, aTargetElements)
	{
		if (!aExpression) return aTargetElements;
		var found = [];
		var foundCount = 0;
		for (var i = 0, maxi = aTargetElements.length; i < maxi; i++)
		{
			var nodes = self.getNodesByXPath(aExpression, aTargetElements[i]);
			for (var j = 0, maxj = nodes.snapshotLength; j < maxj; j++)
			{
				found[foundCount++] = nodes.snapshotItem(j);
			}
		}
		return found;
	}

	function getElementsByCondition( callback, targetElements )
	{
		var elements = [];
		var elmCount = 0;
		for ( var i = 0, len = targetElements.length; i < len; i++ ) {
			var element = targetElements[i];
			if ( callback(element) > 0 ) {
				elements[elmCount++] = element;
			}
		}
		return elements;
	}

	function getFirstLetters(targetElements)
	{
		var elements = [];
		var count = 0;
		var first = self.createElement('span');
		first.setAttribute('class', 'pseud-first-letter');
		for (var i = 0, len = targetElements.length; i < len; i++)
		{
			var firsts = self.getNodesByXPath('descendant::*[@class = "pseud-first-letter"]', targetElements[i]);
			if (firsts.snapshotLength) {
				elements[count++] = firsts.snapshotItem(0);
			}
			else {
				var text = self.getNodesByXPath('descendant::text()', targetElements[i]);
				var node = text.snapshotItem(0);
				node.nodeValue = node.nodeValue.replace(/^(\s*[\"\'\`\<\>\{\}\[\]\(\)\u300c\u300d\uff62\uff63\u300e\u300f\u3010\u3011\u2018\u2019\u201c\u201d\uff3b\uff3d\uff5b\uff5d\u3008\u3009\u300a\u300b\uff08\uff09\u3014\u3015]*.)/, '');
				var newFirst = first.cloneNode(true)
				node.parentNode.insertBefore(newFirst, node)
					.appendChild(self.createTextNode(RegExp.$1));
				elements[count++] = newFirst;
			}
		}
		return elements;
	}

	function getFirstLines(targetElements)
	{
		var elements = [];
		var count = 0;
		var d = self;
		var first = d.createElement('span');
		first.setAttribute('class', 'pseud-first-line');
		var dummy = d.createElement('span');
		dummy.setAttribute('class', 'pseud-dummy-box');
		var dummy1 = dummy.cloneNode(true);
		var dummy2 = dummy.cloneNode(true);
		var range = d.createRange();
		for (var i = 0, len = targetElements.length; i < len; i++)
		{
			var firsts = self.getNodesByXPath('descendant::*[@class = "pseud-first-line"]', targetElements[i]);
			if (firsts.snapshotLength) {
				elements[count++] = firsts.snapshotItem(0);
			}
			else {
				var text = self.getNodesByXPath('descendant::text()', targetElements[i]);
				var lineEnd = false;
				for (var j = 0, maxj = text.snapshotLength; j < maxj; j++)
				{
					var node = text.snapshotItem(j);
					var parent = node.parentNode;
					var firstPart = first.cloneNode(true);
					firstPart.appendChild(d.createTextNode(''));
					parent.insertBefore(dummy1, node);
					var y = dummy1.offsetTop;
					for (var k = 0, maxk = node.nodeValue.length; k < maxk; k++)
					{
						range.selectNodeContents(parent);
						range.setStart(dummy1.nextSibling, k);
						range.collapse(true);
						range.insertNode(dummy2);
						range.setStartBefore(parent.firstChild);
						if (dummy2.offsetTop != y) {
							firstPart.firstChild.nodeValue = firstPart.firstChild.nodeValue.substring(0, firstPart.firstChild.nodeValue.length-1);
							parent.removeChild(dummy2);
							parent.normalize();
							lineEnd = true;
							break;
						}
						firstPart.firstChild.nodeValue += parent.textContent.charAt(k);
						parent.removeChild(dummy2);
						parent.normalize();
					}
					parent.removeChild(dummy1);
					if (firstPart.firstChild.nodeValue.length &&
						!/^\s*$/.test(firstPart.firstChild.nodeValue)) {
						range.selectNodeContents(parent);
						range.insertNode(firstPart);
						range.selectNodeContents(parent);
						range.setStartAfter(firstPart);
						range.setEnd(firstPart.nextSibling, firstPart.firstChild.nodeValue.length);
						range.deleteContents();
						elements[count++] = firstPart;
					}
					if (lineEnd) break;
				}
			}
		}
		range.detach();
		return elements;
	}

	function search()
	{
		var step = [];
		var stepCount = 0;

		step[stepCount++] =
			buf.combinators == '>' ? '*' :
			buf.combinators == '+' ? 'following-sibling::*[1]' :
			buf.combinators == '~' ? 'following-sibling::*' :
			'descendant::*';

		var tagName = ((buf.element || '').replace(/^(\w+|\*)\|/, '') || '*');
		var nameCondition = '';
		if (tagName != '*') {
			nameCondition = '[local-name() = "'+tagName+'" or local-name() = "'+tagName.toUpperCase()+'"]';
			step[stepCount++] = nameCondition;
		}

		if (buf.id.length) step[stepCount++] = '[@id = "'+buf.id+'"]';
		if (buf.class.length) {
			var classes = buf.class.split('.').map(function(aItem) {
					return 'contains(concat(" ",@class," "), " '+aItem+' ")'
				});
			step[stepCount++] = '['+classes.join(' and ')+']';
		}
		if (buf.attributes.length) {
			var attributes = buf.attributes;
			for ( var i = 0, attr_len = attributes.length; i < attr_len; i++ )
			{
				var attribute = attributes[i];
				/^(\w+)\s*(?:([~\|\^\$\*]?=)\s*["]?(.+?)["]?)?$/.test(attribute);
				var attrName  = RegExp.$1;
				var operator  = RegExp.$2;
				var attrValue = RegExp.$3;
				step[stepCount++] = '['+(
					operator == '=' ? '@'+attrName+' = "'+attrValue+'"' :
					operator == '~=' ? 'contains(concat(" ",@'+attrName+'," "), " '+attrValue+' " )' :
					operator == '|=' ? 'starts-with(@'+attrName+', "'+attrValue+'") or starts-with(@'+attrName+', "'+attrValue+'-")' :
					operator == '^=' ? 'starts-with(@'+attrName+', "'+attrValue+'" )' :
					operator == '$=' ? 'substring(@'+attrName+', string-length(@'+attrName+') - string-length("'+attrValue+'") + 1) = "'+attrValue+'"' :
					operator == '*=' ? 'contains(@'+attrName+', "'+attrValue+'" )' :
						'@'+attrName
				)+']';
			}
		}

		var pseudEvaluated = true;
		if (buf.pseud.length) {
			switch (buf.pseud)
			{
				case 'first-child':
					step[stepCount++] = '[not(preceding-sibling::*)]';
					break;
				case 'last-child':
					step[stepCount++] = '[not(following-sibling::*)]';
					break;
				case 'first-of-type':
					step[stepCount++] = '[1]';
				case 'last-of-type':
					step[stepCount++] = '[last()]';
					break;
				case 'only-child':
					step[stepCount++] = '[not(preceding-sibling::*) and not(following-sibling::*)]';
					break;
				case 'only-of-type':
					step[stepCount++] = '[not(preceding-sibling::*'+nameCondition+') and not(following-sibling::*'+nameCondition+')]';
					break;
				case 'empty':
					step[stepCount++] = '[not(node())]';
					break;
				case 'link':
					step[stepCount++] = '[contains(" link LINK a A area AREA ", concat(" ", local-name(), " ")]';
					break;
				case 'enabled':
					step[stepCount++] = '[(@enabled and (@enabled = "true" or @enabled = "enabled" or @enabled != "false")) or (@disabled and (@disabled == "false" or @disabled != "disabled"))]';
					break;
				case 'disabled':
					step[stepCount++] = '[(@enabled and (@enabled = "false" or @enabled != "enabled")) or (@disabled and (@disabled == "true" or @disabled = "disabled" or @disabled != "false"))]';
					break;
				case 'checked':
					step[stepCount++] = '[(@checked and (@checked = "true" or @checked = "checked" or @checked != "false")) or (@selected and (@selected = "true" or @selected = "selected" or @selected != "false"))]';
					break;
				case 'indeterminate':
					step[stepCount++] = '[(@checked and (@checked = "false" or @checked != "checked")) or (@selected and (@selected = "false" or @selected != "selected"))]';
					break;
				case 'root':
					step[stepCount++] = '[not(ancestor::*)]';
					break;
				default:
					var condition = /^nth-(last-)?of-type/.test(buf.pseud) ? nameCondition : '' ;

					if (/not\(\s*(.+)\s*\)$/.test(buf.pseud)) {
						step[stepCount++] = '[not('+self.convertSelectorToXPath(RegExp.$1, true)+')]';
					}

					else if (/nth-(child|of-type)\(\s*([0-9]+)\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(preceding-sibling::*'+condition+') = '+(parseInt(RegExp.$2)-1)+']';
					}
					else if (/nth-(child|of-type)\(\s*([0-9]+)n\s*(\+([0-9]+)\s*)?\)/.test(buf.pseud)) {
						step[stepCount++] = '[(count(preceding-sibling::*'+condition+')'+(RegExp.$4 ? ' + '+RegExp.$4 : '' )+') mod '+RegExp.$2+' = 1]';
					}
					else if (/nth-(child|of-type)\(\s*odd\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(preceding-sibling::*'+condition+') mod 2 = 0]';
					}
					else if (/nth-(child|of-type)\(\s*even\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(preceding-sibling::*'+condition+') mod 2 = 1]';
					}

					else if (/nth-last-(child|of-type)\(\s*([0-9]+)\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(following-sibling::*'+condition+') = '+(parseInt(RegExp.$2)-1)+']';
					}
					else if (/nth-last-(child|of-type)\(\s*([0-9]+)n\s*(\+([0-9]+)\s*)?\)/.test(buf.pseud)) {
						step[stepCount++] = '[(count(following-sibling::*'+condition+')'+(RegExp.$4 ? ' + '+RegExp.$4 : '' )+') mod '+RegExp.$2+' = 1]';
					}
					else if (/nth-last-(child|of-type)\(\s*odd\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(following-sibling::*'+condition+') mod 2 = 0]';
					}
					else if (/nth-last-(child|of-type)\(\s*even\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[count(following-sibling::*'+condition+') mod 2 = 1]';
					}

					else if (/contains\(\s*["'](.+)["']\s*\)/.test(buf.pseud)) {
						step[stepCount++] = '[contains(descendant::text(), "'+RegExp.$1+'")]';
					}

					else {
						pseudEvaluated = false;
					}
					break;
			}
		}

		// Pseud-class
		if (!pseudEvaluated && buf.pseud.length) {
			var found = evaluate(steps.join('/')+'/'+step.join(''), foundElements);
			switch (buf.pseud)
			{
/*
				case 'visited':
					if (silhouettePseudElementsAndClasses) {
						var history = Components.classes['@mozilla.org/browser/global-history;2'].getService(Components.interfaces.nsIGlobalHistory2);
						found = getElementsByCondition(function(aElement) {
							var uri = aElement.href || aElement.getAttribute('href');
							var isLink = /^(link|a|area)$/i.test(aElement.localName) && uri;
							var isVisited = false;
							if (isLink) {
								try {
									isVisited = history.isVisited(self.makeURIFromSpec(uri));
								}
								catch(e) {
									dump(uri+' / '+self.makeURIFromSpec(uri));
									dump(e+'\n');
								}
								if (isVisited) {
									var className = aElement.getAttribute('class');
									aElement.setAttribute('class', (className ? className+' ' : '' )+'pseud-class-visited');
								}
							}
							return isLink && isVisited ? 1 : -1 ;
						}, found);
						step[stepCount++] = '[contains(concat(" ",@class," "), " pseud-class-visited ")]';
						break;
					}
*/

				case 'target':
					if (silhouettePseudElementsAndClasses) {
						found = getElementsByCondition(function(aElement) {
							(/#(.+)$/).test(self.defaultView.location.href);
							var isTarget = RegExp.$1 && aElement.getAttribute('id') == decodeURIComponent(RegExp.$1);
							if (isTarget) {
								var className = aElement.getAttribute('class');
								aElement.setAttribute('class', (className ? className+' ' : '' )+'pseud-class-target');
							}
							return isTarget ? 1 : -1 ;
						}, found);
						step[stepCount++] = '[contains(concat(" ",@class," "), " pseud-class-target ")]';
						break;
					}

				case 'first-letter':
					if (silhouettePseudElementsAndClasses) {
						found = getFirstLetters(found);
						step[stepCount++] = '/*[@class = "pseud-first-letter"]';
						break;
					}

				case 'first-line':
					if (silhouettePseudElementsAndClasses) {
						found = getFirstLines(found);
						step[stepCount++] = '/*[@class = "pseud-first-line"]';
						break;
					}

				default:
					steps      = [];
					stepsCount = 0;
					step       = [];
					stepCount  = 0;
					found      = [];
					break;
			}
			foundElements = found;
		}

		if (stepCount) steps[stepsCount++] = step.join('');
		buf.clear();
	};


	var escaped = false;
	var parenLevel = 0;
	for ( var i = 0, len = tokens.length; i < len; i++  )
	{
		var token = tokens[i];
		if (escaped) {
			buf[mode] += token;
			escaped = false;
			continue;
		}
		else if (parenLevel && token != ')') {
			if (token == '(')  parenLevel++;
			buf[mode] += token;
			continue;
		}
		switch (token)
		{
			case '\\':
				escaped = true;
				break;

			// selector
			case '[':
				mode = 'attribute';
				break;
			case ']':
				buf.attributes.push(buf.attribute);
				buf.attribute = '';
				mode = 'element';
				break;
			case '.':
				if (mode == 'class') {
					buf[mode] += token;
				}
				mode = 'class';
				break;
			case '#':
				mode = 'id';
				break;

			case ':':
				mode = 'pseud';
				break;
			case '(':
				if (mode == 'pseud') {
					parenLevel++;
				}
				buf[mode] += token;
				break;
			case ')':
				buf[mode] += token;
				if (parenLevel) {
					parenLevel--;
					if (!parenLevel) mode = 'element';
				}
				break;

			// combinators
			case ' ':
				search();
				buf.combinators = ' ';
				mode = 'element';
				break;
			case '>':
				search();
				buf.combinators = '>';
				mode = 'element';
				break;
			case '+':
				search();
				buf.combinators = '+';
				mode = 'element';
				break;
			case '~':
				if (mode == 'attribute' || parenLevel) {
					buf[mode] += token;
				}
				else {
					search();
					buf.combinators = '~';
					mode = 'element';
				}
				break;

			// elements
			case '*':
				if (mode == 'attribute' || parenLevel) {
					buf[mode] += token;
				}
				else {
					buf.element = '*';
				}
				break;

			// default
			default :
				buf[mode] += token;
				break;

		}
		if (!foundElements.length) {
			return '';
		}
	}
	search();
	if (stepsCount) {
		if (aInNotPseudClass) {
			steps.reverse();
			var isFirst = true;
			for (var i = 0, maxi = steps.length; i < maxi; i++)
			{
				if (isFirst) {
					steps[i] = steps[i].replace(/^[^:]*/, 'self');
					isFirst = false;
				}
				else {
					steps[i] = steps[i]
								.replace(/^([^:]*|child)/, 'parent')
								.replace(/^descendant/, 'ancestor');
				}
			}
		}
	}

	return steps.join('/');
};

document.getNodesByXPath = function(aExpression, aContext, aLive) 
{
	var aContext = aContext || this;
	var type = aLive ? XPathResult.ORDERED_NODE_ITERATOR_TYPE : XPathResult.ORDERED_NODE_SNAPSHOT_TYPE ;
	var nodes;
	try {
		nodes = this.evaluate(aExpression, aContext, null, type, null);
	}
	catch(e) {
	}
	return nodes;
};

var $S = function () {
    if ( arguments.length == 1 ) {
        return document.getElementsBySelector(arguments[0]);
    }
    else {
        var results  = [];
        var resCount = 0;
        for ( var i = 0, len = arguments.length; i < len; i++ ) {
            results[resCount++] = document.getElementsBySelector(arguments[i]);
        }
        return results;
    }
}

1;
